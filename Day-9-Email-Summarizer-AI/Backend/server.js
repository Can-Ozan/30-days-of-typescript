import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';

dotenv.config();

const app = express();
const port = process.env.PORT || 3000;

app.use(cors());
app.use(express.json());

// Mock OpenAI servisi - API key olmadan Ã§alÄ±ÅŸÄ±r
const mockOpenAI = {
  chat: {
    completions: {
      create: async ({ messages }) => {
        const userMessage = messages.find(m => m.role === 'user')?.content || '';
        const email = userMessage.replace('AÅŸaÄŸÄ±daki e-postayÄ± Ã¶zetle:\n\n', '');
        
        return {
          choices: [{
            message: {
              content: `ðŸ“‹ **MOCK Ã–ZET**\n\nâ€¢ E-posta baÅŸarÄ±yla alÄ±ndÄ±\nâ€¢ ${email.split(' ').length} kelime\nâ€¢ OpenAI API key bekleniyor\nâ€¢ GerÃ§ek Ã¶zet burada gÃ¶rÃ¼necek`
            }
          }]
        };
      }
    }
  }
};

// Ã–zetleme endpoint'i
app.post('/api/summarize', async (req, res) => {
  try {
    const { email, maxLength = 150 } = req.body;

    if (!email) {
      return res.status(400).json({ error: 'E-posta metni gerekli' });
    }

    // Mock OpenAI Ã§aÄŸrÄ±sÄ±
    const completion = await mockOpenAI.chat.completions.create({
      messages: [
        {
          role: "system",
          content: `E-postayÄ± TÃ¼rkÃ§e Ã¶zetle. Maksimum ${maxLength} kelime.`
        },
        {
          role: "user", 
          content: `AÅŸaÄŸÄ±daki e-postayÄ± Ã¶zetle:\n\n${email}`
        }
      ]
    });

    const summary = completion.choices[0].message.content;

    res.json({
      original: email,
      summary: summary,
      length: {
        original: email.split(/\s+/).length,
        summary: summary.split(/\s+/).length,
        reduction: '%50'
      }
    });

  } catch (error) {
    console.error('Hata:', error);
    res.status(500).json({ error: 'Sunucu hatasÄ±' });
  }
});

// Health check
app.get('/health', (req, res) => {
  res.json({ status: 'OK', message: 'Backend Ã§alÄ±ÅŸÄ±yor!' });
});

app.listen(port, () => {
  console.log(`ðŸš€ Backend http://localhost:${port} portunda Ã§alÄ±ÅŸÄ±yor`);
  console.log(`ðŸ“Š Health: http://localhost:${port}/health`);
});